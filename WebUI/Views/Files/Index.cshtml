@using System.IO
@using System.Linq
@model IEnumerable<Shared.Models.FileRecord>
@{
    ViewData["Title"] = "Indexed Files";
    var currentPage = (int)ViewBag.CurrentPage;
    var totalPages = (int)ViewBag.TotalPages;
    var totalCount = (int)ViewBag.TotalCount;
    var pageSize = (int)ViewBag.PageSize;
    var searchTerm = ViewBag.SearchTerm?.ToString() ?? "";
    var sortBy = ViewBag.SortBy?.ToString() ?? "IndexedDate";
    var sortAscending = (bool)ViewBag.SortAscending;
    var isActive = ViewBag.IsActive as bool?;
    var inputFolderPath = ViewBag.InputFolderPath?.ToString() ?? "";

    string GetFileTypeHelper(string fileName)
    {
        var extension = System.IO.Path.GetExtension(fileName).ToLowerInvariant();
        
        if (new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp", ".svg", ".tiff", ".ico" }.Contains(extension))
            return "image";
        
        if (new[] { ".mp4", ".avi", ".mov", ".wmv", ".flv", ".webm", ".mkv", ".m4v", ".3gp", ".ogv" }.Contains(extension))
            return "video";
        
        if (new[] { ".mp3", ".wav", ".flac", ".aac", ".ogg", ".wma", ".m4a" }.Contains(extension))
            return "audio";
        
        if (new[] { ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".txt", ".rtf" }.Contains(extension))
            return "document";
        
        if (new[] { ".zip", ".rar", ".7z", ".tar", ".gz", ".bz2" }.Contains(extension))
            return "archive";
        
        if (new[] { ".cs", ".js", ".html", ".css", ".json", ".xml", ".sql", ".py", ".java", ".cpp", ".c", ".h" }.Contains(extension))
            return "code";
        
        return "file";
    }

    Microsoft.AspNetCore.Html.IHtmlContent GetFileIconHelper(string fileType)
    {
        var iconHtml = fileType switch
        {
            "image" => "<i class=\"fas fa-image text-success me-1\"></i>",
            "video" => "<i class=\"fas fa-video text-primary me-1\"></i>",
            "audio" => "<i class=\"fas fa-music text-info me-1\"></i>",
            "document" => "<i class=\"fas fa-file-alt text-primary me-1\"></i>",
            "archive" => "<i class=\"fas fa-file-archive text-warning me-1\"></i>",
            "code" => "<i class=\"fas fa-code text-success me-1\"></i>",
            _ => "<i class=\"fas fa-file text-muted me-1\"></i>"
        };
        return new Microsoft.AspNetCore.Html.HtmlString(iconHtml);
    }
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-folder-open me-2 text-primary"></i>Indexed Files</h2>
    <div class="pagination-info">
        Showing @((currentPage - 1) * pageSize + 1) to @(Math.Min(currentPage * pageSize, totalCount)) of @totalCount files
    </div>
</div>

<!-- Success/Error Messages Container -->
<div id="messagesContainer"></div>

<div class="search-container">
    <div class="row g-3">
        <div class="col-md-4">
            <label for="searchInput" class="form-label">Search Files</label>
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" class="form-control" id="searchInput" placeholder="Search by filename or path..." value="@searchTerm">
            </div>
        </div>
        <div class="col-md-2">
            <label for="pageSizeSelect" class="form-label">Page Size</label>
            <select class="form-select" id="pageSizeSelect">
                <option value="25" @(pageSize == 25 ? "selected" : "")>25</option>
                <option value="50" @(pageSize == 50 ? "selected" : "")>50</option>
                <option value="100" @(pageSize == 100 ? "selected" : "")>100</option>
                <option value="200" @(pageSize == 200 ? "selected" : "")>200</option>
            </select>
        </div>
        <div class="col-md-2">
            <label for="statusFilter" class="form-label">Status</label>
            <select class="form-select" id="statusFilter">
                <option value="" @(!isActive.HasValue ? "selected" : "")>All Files</option>
                <option value="true" @(isActive == true ? "selected" : "")>Active Only</option>
                <option value="false" @(isActive == false ? "selected" : "")>Inactive Only</option>
            </select>
        </div>
        <div class="col-md-2">
            <label for="sortBySelect" class="form-label">Sort By</label>
            <select class="form-select" id="sortBySelect">
                <option value="FileName" @(sortBy == "FileName" ? "selected" : "")>File Name</option>
                <option value="RelativePath" @(sortBy == "RelativePath" ? "selected" : "")>Path</option>
                <option value="FileSizeBytes" @(sortBy == "FileSizeBytes" ? "selected" : "")>File Size</option>
                <option value="CreationDate" @(sortBy == "CreationDate" ? "selected" : "")>Created Date</option>
                <option value="ModificationDate" @(sortBy == "ModificationDate" ? "selected" : "")>Modified Date</option>
                <option value="IndexedDate" @(sortBy == "IndexedDate" ? "selected" : "")>Indexed Date</option>
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Sort Order</label>
            <div class="btn-group w-100" role="group">
                <input type="radio" class="btn-check" name="sortOrder" id="sortAsc" value="true" @(sortAscending ? "checked" : "")>
                <label class="btn btn-outline-primary" for="sortAsc"><i class="fas fa-sort-alpha-down"></i></label>
                <input type="radio" class="btn-check" name="sortOrder" id="sortDesc" value="false" @(!sortAscending ? "checked" : "")>
                <label class="btn btn-outline-primary" for="sortDesc"><i class="fas fa-sort-alpha-down-alt"></i></label>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-12">
            <button class="btn btn-primary" id="searchBtn"><i class="fas fa-search me-1"></i>Search</button>
            <button class="btn btn-outline-secondary ms-2" id="clearBtn"><i class="fas fa-times me-1"></i>Clear</button>
            <button class="btn btn-outline-info ms-2" id="refreshBtn"><i class="fas fa-sync-alt me-1"></i>Refresh</button>
            <button class="btn btn-outline-warning ms-2" id="syncBtn"><i class="fas fa-cloud-upload-alt me-1"></i>Sync to Remote</button>
        </div>
    </div>
</div>

<!-- Bulk Actions Toolbar -->
<div class="bulk-actions-toolbar mb-3" id="bulkActionsToolbar" style="display: none;">
    <div class="d-flex align-items-center gap-3 p-3 bg-light border rounded">
        <span class="text-muted">
            <i class="fas fa-check-square me-1"></i>
            <span id="selectedCount">0</span> file(s) selected
        </span>
        <button class="btn btn-danger btn-sm" id="bulkDeleteBtn">
            <i class="fas fa-trash me-1"></i>Mark Selected as Inactive
        </button>
        <button class="btn btn-outline-secondary btn-sm" id="clearSelectionBtn">
            <i class="fas fa-times me-1"></i>Clear Selection
        </button>
    </div>
</div>

<!-- Media Display Modal -->
<div class="modal fade" id="mediaModal" tabindex="-1" aria-labelledby="mediaModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="mediaModalLabel">Media Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div id="mediaContent">
                    <!-- Media content will be loaded here -->
                </div>
                <div id="mediaError" class="alert alert-danger d-none">
                    Error loading media file
                </div>
                <div id="mediaLoading" class="d-none">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div id="mediaInfo" class="me-auto text-muted small">
                    <!-- File info will be displayed here -->
                </div>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th style="width: 40px;">
                    <input type="checkbox" id="selectAll" title="Select All">
                </th>
                <th>File Name</th>
                <th>Path</th>
                <th>Size</th>
                <th>Created</th>
                <th>Modified</th>
                <th>Indexed</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="filesTableBody">
            @foreach (var file in Model)
            {
                <tr class="@(file.IsActive ? "" : "table-warning")">
                    <td>
                        @if (file.IsActive)
                        {
                            <input type="checkbox" class="file-checkbox" data-file-id="@file.Id">
                        }
                        else
                        {
                            <span class="text-muted">-</span>
                        }
                    </td>
                    <td>
                        @{
                            var fileType = ViewBag.InputFolderPath != null ? GetFileTypeHelper(file.FileName) : "file";
                            var isMediaFile = fileType == "image" || fileType == "video";
                            var isClickable = isMediaFile && file.IsActive;
                        }
                        <div class="d-flex align-items-center">
                            <span class="file-name flex-grow-1" title="@file.FileName">
                                @GetFileIconHelper(fileType)
                                @if (isClickable)
                                {
                                    <a href="#" class="ms-2 media-file-link text-decoration-none" 
                                       data-file-id="@file.Id" 
                                       data-file-name="@file.FileName"
                                       data-file-type="@fileType"
                                       title="Click to preview @file.FileName">
                                        @file.FileName
                                    </a>
                                }
                                else
                                {
                                    <span class="ms-2">@file.FileName</span>
                                }
                            </span>
                            <button class="btn btn-sm btn-outline-secondary ms-2 copy-filename-btn" 
                                    data-filename="@file.FileName" 
                                    title="Copy file name to clipboard"
                                    type="button">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </td>
                    <td>
                        @{
                            var combinedPath = System.IO.Path.Combine(inputFolderPath, file.RelativePath, file.FileName);
                        }
                        <div class="d-flex align-items-center">
                            <span class="file-path flex-grow-1" title="Full path: @combinedPath">@file.RelativePath</span>
                            <button class="btn btn-sm btn-outline-secondary ms-2 copy-path-btn" 
                                    data-path="@combinedPath" 
                                    title="Copy full path to clipboard"
                                    type="button">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </td>
                    <td>@file.FileSizeFormatted</td>
                    <td>@file.CreationDate.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@file.ModificationDate.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@file.IndexedDate.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>
                        @* Server-side rendering will be replaced by JavaScript, so just show a placeholder *@
                        <span class="badge bg-secondary"><i class="fas fa-spinner fa-spin me-1"></i>Loading...</span>
                    </td>
                    <td>
                        @* Actions will be determined by sync status via JavaScript *@
                        <span class="text-muted">Loading...</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (totalPages > 1)
{
    <nav aria-label="Page navigation" class="mt-4">
        <ul class="pagination justify-content-center" id="pagination">
            <!-- Pagination will be generated by JavaScript -->
        </ul>
    </nav>
}

<style>
    .copy-path-btn {
        opacity: 0.7;
        transition: opacity 0.2s ease-in-out;
        min-width: 32px;
        height: 32px;
        padding: 4px 8px;
        border-radius: 4px;
    }
    
    .copy-path-btn:hover {
        opacity: 1;
    }
    
    .file-path {
        font-family: 'Courier New', Consolas, Monaco, monospace;
        font-size: 0.9em;
        word-break: break-all;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        max-width: 400px;
    }
    
    .copy-path-btn i {
        font-size: 0.8em;
    }
    
    /* Copy filename button styling */
    .copy-filename-btn {
        opacity: 0.7;
        transition: opacity 0.2s ease-in-out;
        min-width: 32px;
        height: 32px;
        padding: 4px 8px;
        border-radius: 4px;
    }
    
    .copy-filename-btn:hover {
        opacity: 1;
    }
    
    .copy-filename-btn i {
        font-size: 0.8em;
    }
    
    /* Animation for copy success */
    .copy-filename-btn.btn-success {
        transition: all 0.3s ease-in-out;
    }
    
    /* Animation for copy success */
    .copy-path-btn.btn-success {
        transition: all 0.3s ease-in-out;
    }
    
    /* Ensure the columns have proper space */
    .table th:nth-child(2), 
    .table td:nth-child(2) {
        min-width: 250px;
        max-width: 400px;
    }
    
    .table th:nth-child(3), 
    .table td:nth-child(3) {
        min-width: 200px;
        max-width: 300px;
    }
</style>

@section Scripts {
    <script>
        let currentPage = @currentPage;
        let totalPages = @totalPages;
        let isLoading = false;

        document.addEventListener('DOMContentLoaded', function() {
            updatePagination();
            
            // Load sync status for initially rendered files
            performSearch(currentPage);
            
            // Search functionality
            document.getElementById('searchBtn').addEventListener('click', performSearch);
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    performSearch();
                }
            });
            
            // Clear functionality
            document.getElementById('clearBtn').addEventListener('click', function() {
                document.getElementById('searchInput').value = '';
                document.getElementById('statusFilter').value = '';
                document.getElementById('sortBySelect').value = 'IndexedDate';
                document.querySelector('input[name="sortOrder"][value="false"]').checked = true;
                document.getElementById('pageSizeSelect').value = '50';
                performSearch();
            });
            
            // Refresh functionality
            document.getElementById('refreshBtn').addEventListener('click', performSearch);
            
            // Sync functionality
            document.getElementById('syncBtn').addEventListener('click', function() {
                syncToRemote();
            });
            
            // Auto-search on filter changes
            document.getElementById('pageSizeSelect').addEventListener('change', performSearch);
            document.getElementById('statusFilter').addEventListener('change', performSearch);
            document.getElementById('sortBySelect').addEventListener('change', performSearch);
            document.querySelectorAll('input[name="sortOrder"]').forEach(radio => {
                radio.addEventListener('change', performSearch);
            });
        });

        function performSearch(page = 1) {
            if (isLoading) return;
            
            isLoading = true;
            showLoading();
            
            const searchTerm = document.getElementById('searchInput').value;
            const pageSize = document.getElementById('pageSizeSelect').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const sortBy = document.getElementById('sortBySelect').value;
            const sortAscending = document.querySelector('input[name="sortOrder"]:checked').value === 'true';
            
            const params = new URLSearchParams({
                page: page,
                pageSize: pageSize,
                searchTerm: searchTerm,
                sortBy: sortBy,
                sortAscending: sortAscending
            });
            
            if (statusFilter !== '') {
                params.append('isActive', statusFilter);
            }
            
            fetch(`/Files/GetFilesData?${params}`)
                .then(response => response.json())
                .then(data => {
                    updateTable(data.files);
                    updatePaginationInfo(data.currentPage, data.totalPages, data.totalCount, pageSize);
                    currentPage = data.currentPage;
                    totalPages = data.totalPages;
                    updatePagination();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error loading data. Please try again.');
                })
                .finally(() => {
                    isLoading = false;
                    hideLoading();
                });
        }

        function updateTable(files) {
            const tbody = document.getElementById('filesTableBody');
            tbody.innerHTML = '';
            
            files.forEach(file => {
                const row = document.createElement('tr');
                row.className = file.isActive ? '' : 'table-warning';
                row.innerHTML = `
                    <td>
                        ${file.isActive 
                            ? `<input type="checkbox" class="file-checkbox" data-file-id="${file.id}">`
                            : '<span class="text-muted">-</span>'
                        }
                    </td>
                    <td>
                        ${getFileNameWithIcon(file)}
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <span class="file-path flex-grow-1" title="Full path: ${escapeHtml(file.combinedPath)}">${escapeHtml(file.relativePath)}</span>
                            <button class="btn btn-sm btn-outline-secondary ms-2 copy-path-btn" 
                                    data-path="${escapeHtml(file.combinedPath)}" 
                                    title="Copy full path to clipboard"
                                    type="button">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </td>
                    <td>${escapeHtml(file.fileSizeFormatted)}</td>
                    <td>${formatDate(file.creationDate)}</td>
                    <td>${formatDate(file.modificationDate)}</td>
                    <td>${formatDate(file.indexedDate)}</td>
                    <td>
                        ${getSyncStatusBadge(file.syncStatus)}
                    </td>
                    <td>
                        ${getSyncActionButton(file)}
                    </td>
                `;
                tbody.appendChild(row);
            });
            
            // Reattach event listeners for the new delete buttons
            reattachEventListeners();
        }

        function updatePaginationInfo(page, totalPagesCount, totalCount, pageSize) {
            const start = (page - 1) * pageSize + 1;
            const end = Math.min(page * pageSize, totalCount);
            document.querySelector('.pagination-info').textContent = 
                `Showing ${start} to ${end} of ${totalCount} files`;
        }

        function updatePagination() {
            const pagination = document.getElementById('pagination');
            if (!pagination) return;
            
            pagination.innerHTML = '';
            
            if (totalPages <= 1) return;
            
            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${currentPage - 1})">Previous</a>`;
            pagination.appendChild(prevLi);
            
            // Page numbers
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);
            
            if (startPage > 1) {
                const firstLi = document.createElement('li');
                firstLi.className = 'page-item';
                firstLi.innerHTML = `<a class="page-link" href="#" onclick="goToPage(1)">1</a>`;
                pagination.appendChild(firstLi);
                
                if (startPage > 2) {
                    const ellipsisLi = document.createElement('li');
                    ellipsisLi.className = 'page-item disabled';
                    ellipsisLi.innerHTML = '<span class="page-link">...</span>';
                    pagination.appendChild(ellipsisLi);
                }
            }
            
            for (let i = startPage; i <= endPage; i++) {
                const li = document.createElement('li');
                li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                li.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${i})">${i}</a>`;
                pagination.appendChild(li);
            }
            
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    const ellipsisLi = document.createElement('li');
                    ellipsisLi.className = 'page-item disabled';
                    ellipsisLi.innerHTML = '<span class="page-link">...</span>';
                    pagination.appendChild(ellipsisLi);
                }
                
                const lastLi = document.createElement('li');
                lastLi.className = 'page-item';
                lastLi.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${totalPages})">${totalPages}</a>`;
                pagination.appendChild(lastLi);
            }
            
            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${currentPage + 1})">Next</a>`;
            pagination.appendChild(nextLi);
        }

        function goToPage(page) {
            if (page < 1 || page > totalPages || page === currentPage || isLoading) return;
            performSearch(page);
        }

        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('en-CA', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            }).replace(',', '');
        }

        // Delete functionality
        function attachDeleteEventListeners() {
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const fileId = this.getAttribute('data-file-id');
                    const fileName = this.getAttribute('data-file-name');
                    confirmDelete(fileId, fileName);
                });
            });
        }

        function confirmDelete(fileId, fileName) {
            if (confirm(`Are you sure you want to mark "${fileName}" as inactive? This action will set the file as inactive and update its modification date.`)) {
                deleteFile(fileId);
            }
        }

        async function deleteFile(fileId) {
            try {
                showLoading();
                
                const formData = new FormData();
                formData.append('id', fileId);
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value || '');
                
                const response = await fetch('/Files/DeleteFile', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                if (result.success) {
                    // Refresh the current page to show updated data
                    performSearch(currentPage);
                    
                    // Show success message
                    showSuccessMessage(result.message);
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Delete error:', error);
                alert('An error occurred while trying to delete the file.');
            } finally {
                hideLoading();
            }
        }

        // Call this after each AJAX load to reattach event listeners
        function reattachEventListeners() {
            attachDeleteEventListeners();
        }

        // Sync to remote database functionality
        async function syncToRemote() {
            if (!confirm('Are you sure you want to sync all local changes to the remote database? This will overwrite the remote database with local changes.')) {
                return;
            }

            try {
                showLoading();
                
                const response = await fetch('/Files/SyncToRemote', {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                });

                const result = await response.json();
                
                if (result.success) {
                    // Show success message
                    const alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-success alert-dismissible fade show mt-3';
                    alertDiv.innerHTML = `
                        <i class="fas fa-check-circle me-2"></i>${result.message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
                    
                    // Find the container and insert the alert safely
                    const container = document.querySelector('.container-fluid');
                    const searchContainer = document.querySelector('.search-container');
                    
                    if (container && searchContainer) {
                        // Ensure searchContainer is a child of container before using insertBefore
                        if (container.contains(searchContainer)) {
                            container.insertBefore(alertDiv, searchContainer);
                        } else {
                            // Fallback: prepend to container
                            container.prepend(alertDiv);
                        }
                    } else {
                        // Ultimate fallback: use the messages container or prepend to body
                        const messagesContainer = document.getElementById('messagesContainer');
                        if (messagesContainer) {
                            messagesContainer.appendChild(alertDiv);
                        } else {
                            document.body.prepend(alertDiv);
                        }
                    }
                    
                    // Auto-dismiss after 5 seconds
                    setTimeout(() => {
                        alertDiv.remove();
                    }, 5000);
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Sync error:', error);
                alert('An error occurred while trying to sync to remote database.');
            } finally {
                hideLoading();
            }
        }

        // Initial attachment of event listeners
        document.addEventListener('DOMContentLoaded', function() {
            attachDeleteEventListeners();
            attachCopyPathEventListeners();
            attachCopyFilenameEventListeners();
            attachBulkActionEventListeners();
        });

        // Handle browser close/refresh to sync database
        window.addEventListener('beforeunload', function(event) {
            // Attempt emergency sync before page unloads
            try {
                navigator.sendBeacon('/Files/EmergencySync', new FormData());
            } catch (error) {
                console.warn('Emergency sync beacon failed:', error);
            }
        });

        // Bulk operations functionality
        function attachBulkActionEventListeners() {
            // Select all checkbox
            document.getElementById('selectAll').addEventListener('change', function() {
                const checkboxes = document.querySelectorAll('.file-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
                updateBulkActionsToolbar();
            });

            // Individual checkboxes
            document.addEventListener('change', function(event) {
                if (event.target.classList.contains('file-checkbox')) {
                    updateSelectAllState();
                    updateBulkActionsToolbar();
                }
            });

            // Bulk delete button
            document.getElementById('bulkDeleteBtn').addEventListener('click', function() {
                const selectedIds = getSelectedFileIds();
                if (selectedIds.length > 0) {
                    confirmBulkDelete(selectedIds);
                }
            });

            // Clear selection button
            document.getElementById('clearSelectionBtn').addEventListener('click', function() {
                clearAllSelections();
            });
        }

        function getSelectedFileIds() {
            const checkboxes = document.querySelectorAll('.file-checkbox:checked');
            return Array.from(checkboxes).map(cb => parseInt(cb.getAttribute('data-file-id')));
        }

        function updateSelectAllState() {
            const checkboxes = document.querySelectorAll('.file-checkbox');
            const checkedBoxes = document.querySelectorAll('.file-checkbox:checked');
            const selectAllCheckbox = document.getElementById('selectAll');

            if (checkedBoxes.length === 0) {
                selectAllCheckbox.indeterminate = false;
                selectAllCheckbox.checked = false;
            } else if (checkedBoxes.length === checkboxes.length) {
                selectAllCheckbox.indeterminate = false;
                selectAllCheckbox.checked = true;
            } else {
                selectAllCheckbox.indeterminate = true;
                selectAllCheckbox.checked = false;
            }
        }

        function updateBulkActionsToolbar() {
            const selectedCount = document.querySelectorAll('.file-checkbox:checked').length;
            const toolbar = document.getElementById('bulkActionsToolbar');
            const countSpan = document.getElementById('selectedCount');

            countSpan.textContent = selectedCount;

            if (selectedCount > 0) {
                toolbar.style.display = 'block';
            } else {
                toolbar.style.display = 'none';
            }
        }

        function clearAllSelections() {
            document.querySelectorAll('.file-checkbox').forEach(cb => cb.checked = false);
            document.getElementById('selectAll').checked = false;
            document.getElementById('selectAll').indeterminate = false;
            updateBulkActionsToolbar();
        }

        function confirmBulkDelete(fileIds) {
            const count = fileIds.length;
            if (confirm(`Are you sure you want to mark ${count} selected file(s) as inactive? This action will set them as inactive and update their modification dates.`)) {
                bulkDeleteFiles(fileIds);
            }
        }

        async function bulkDeleteFiles(fileIds) {
            try {
                showLoading();
                
                const formData = new FormData();
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value || '');
                
                // Add each file ID to the form data
                fileIds.forEach((id, index) => {
                    formData.append(`[${index}]`, id);
                });
                
                const response = await fetch('/Files/BulkDeleteFiles', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                console.log('Bulk delete API response:', result);
                
                if (result.success) {
                    // Clear selections and refresh table
                    clearAllSelections();
                    performSearch(currentPage);
                    
                    // Show success message using a simpler approach
                    showSuccessMessage(result.message);
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Bulk delete error:', error);
                alert('An error occurred while trying to delete the selected files. Check the console for details.');
            } finally {
                hideLoading();
            }
        }

        function showSuccessMessage(message) {
            try {
                // Use the dedicated messages container
                const messagesContainer = document.getElementById('messagesContainer');
                
                if (!messagesContainer) {
                    throw new Error('Messages container not found');
                }
                
                // Clear any existing messages
                messagesContainer.innerHTML = '';
                
                // Create the alert element
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-success alert-dismissible fade show mb-3';
                alertDiv.innerHTML = `
                    <i class="fas fa-check-circle me-2"></i>${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                
                // Simply append to the dedicated container
                messagesContainer.appendChild(alertDiv);
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    if (alertDiv && alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 5000);
                
                console.log('Success message displayed successfully');
            } catch (error) {
                console.error('Error showing success message:', error);
                // Fallback to simple alert
                alert('Success: ' + message);
            }
        }

        function getSyncStatusBadge(syncStatus) {
            switch (syncStatus) {
                case 'Synced':
                    return '<span class="badge bg-success"><i class="fas fa-check-circle me-1"></i>Synced</span>';
                case 'Not Synced':
                    return '<span class="badge bg-warning text-dark"><i class="fas fa-clock me-1"></i>Not Synced</span>';
                case 'Deleted':
                    return '<span class="badge bg-danger"><i class="fas fa-trash me-1"></i>Deleted</span>';
                default:
                    return '<span class="badge bg-secondary"><i class="fas fa-question me-1"></i>Unknown</span>';
            }
        }

        function getFileIcon(fileType) {
            switch (fileType) {
                case 'image':
                    return '<i class="fas fa-image text-success"></i>';
                case 'video':
                    return '<i class="fas fa-video text-primary"></i>';
                case 'audio':
                    return '<i class="fas fa-music text-info"></i>';
                case 'document':
                    return '<i class="fas fa-file-alt text-primary"></i>';
                case 'archive':
                    return '<i class="fas fa-file-archive text-warning"></i>';
                case 'code':
                    return '<i class="fas fa-code text-success"></i>';
                default:
                    return '<i class="fas fa-file text-muted"></i>';
            }
        }

        function getFileNameWithIcon(file) {
            const icon = getFileIcon(file.fileType);
            const isClickable = file.isMediaFile && file.syncStatus === 'Synced';
            
            if (isClickable) {
                return `<div class="d-flex align-items-center">
                    <span class="file-name flex-grow-1">
                        ${icon}
                        <a href="#" class="ms-2 media-file-link text-decoration-none" 
                           data-file-id="${file.id}" 
                           data-file-name="${escapeHtml(file.fileName)}"
                           data-file-type="${file.fileType}"
                           title="Click to preview ${escapeHtml(file.fileName)}">
                            ${escapeHtml(file.fileName)}
                        </a>
                    </span>
                    <button class="btn btn-sm btn-outline-secondary ms-2 copy-filename-btn" 
                            data-filename="${escapeHtml(file.fileName)}" 
                            title="Copy file name to clipboard"
                            type="button">
                        <i class="fas fa-copy"></i>
                    </button>
                </div>`;
            } else {
                return `<div class="d-flex align-items-center">
                    <span class="file-name flex-grow-1" title="${escapeHtml(file.fileName)}">
                        ${icon}
                        <span class="ms-2">${escapeHtml(file.fileName)}</span>
                    </span>
                    <button class="btn btn-sm btn-outline-secondary ms-2 copy-filename-btn" 
                            data-filename="${escapeHtml(file.fileName)}" 
                            title="Copy file name to clipboard"
                            type="button">
                        <i class="fas fa-copy"></i>
                    </button>
                </div>`;
            }
        }

        function getSyncActionButton(file) {
            if (!file.isActive) {
                return '<span class="text-muted">-</span>';
            }
            
            if (file.syncStatus === 'Synced') {
                return `<button class="btn btn-sm btn-outline-danger delete-btn" data-file-id="${file.id}" data-file-name="${escapeHtml(file.fileName)}" title="Mark as inactive">
                    <i class="fas fa-trash"></i>
                </button>`;
            } else if (file.syncStatus === 'Not Synced') {
                return `<div class="btn-group" role="group">
                    <button class="btn btn-sm btn-outline-primary sync-btn" data-file-id="${file.id}" data-file-name="${escapeHtml(file.fileName)}" title="Request sync">
                        <i class="fas fa-sync"></i> Sync
                    </button>
                    <button class="btn btn-sm btn-outline-danger delete-btn" data-file-id="${file.id}" data-file-name="${escapeHtml(file.fileName)}" title="Mark as inactive">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>`;
            } else {
                // For unknown status, just show delete
                return `<button class="btn btn-sm btn-outline-danger delete-btn" data-file-id="${file.id}" data-file-name="${escapeHtml(file.fileName)}" title="Mark as inactive">
                    <i class="fas fa-trash"></i>
                </button>`;
            }
        }

        // Add sync request functionality
        function attachSyncEventListeners() {
            document.querySelectorAll('.sync-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const fileId = this.getAttribute('data-file-id');
                    const fileName = this.getAttribute('data-file-name');
                    requestSync(fileId, fileName);
                });
            });
        }

        // Add copy path functionality
        function attachCopyPathEventListeners() {
            document.querySelectorAll('.copy-path-btn').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    const path = this.getAttribute('data-path');
                    copyToClipboard(path, this);
                });
            });
        }

        // Add copy filename functionality
        function attachCopyFilenameEventListeners() {
            document.querySelectorAll('.copy-filename-btn').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    const filename = this.getAttribute('data-filename');
                    copyToClipboard(filename, this);
                });
            });
        }

        // Add media file preview functionality
        function attachMediaEventListeners() {
            document.querySelectorAll('.media-file-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const fileId = this.getAttribute('data-file-id');
                    const fileName = this.getAttribute('data-file-name');
                    const fileType = this.getAttribute('data-file-type');
                    showMediaPreview(fileId, fileName, fileType);
                });
            });
        }

        // Show media preview in modal
        function showMediaPreview(fileId, fileName, fileType) {
            const modal = new bootstrap.Modal(document.getElementById('mediaModal'));
            const modalTitle = document.getElementById('mediaModalLabel');
            const mediaContent = document.getElementById('mediaContent');
            const mediaError = document.getElementById('mediaError');
            const mediaLoading = document.getElementById('mediaLoading');
            const mediaInfo = document.getElementById('mediaInfo');
            
            // Reset modal state
            modalTitle.textContent = `Preview: ${fileName}`;
            mediaContent.innerHTML = '';
            mediaError.classList.add('d-none');
            mediaLoading.classList.remove('d-none');
            mediaInfo.textContent = `Loading ${fileType}...`;
            
            // Show modal
            modal.show();
            
            // Load media
            const mediaUrl = `/Files/GetMediaFile?fileId=${fileId}`;
            
            if (fileType === 'image') {
                const img = new Image();
                img.onload = function() {
                    mediaLoading.classList.add('d-none');
                    mediaContent.innerHTML = `<img src="${mediaUrl}" class="img-fluid" alt="${fileName}" style="max-height: 70vh;">`;
                    mediaInfo.textContent = `${fileName} - ${this.naturalWidth} × ${this.naturalHeight}px`;
                };
                img.onerror = function() {
                    showMediaError(mediaLoading, mediaError, mediaInfo);
                };
                img.src = mediaUrl;
            } else if (fileType === 'video') {
                mediaLoading.classList.add('d-none');
                mediaContent.innerHTML = `
                    <video controls class="w-100" style="max-height: 70vh;" preload="metadata">
                        <source src="${mediaUrl}" type="video/mp4">
                        <source src="${mediaUrl}">
                        Your browser does not support the video tag.
                    </video>`;
                mediaInfo.textContent = `${fileName} - Video file`;
                
                // Handle video load error
                const video = mediaContent.querySelector('video');
                video.addEventListener('error', function() {
                    showMediaError(mediaLoading, mediaError, mediaInfo);
                });
            }
        }

        function showMediaError(loadingElement, errorElement, infoElement) {
            loadingElement.classList.add('d-none');
            errorElement.classList.remove('d-none');
            infoElement.textContent = 'Failed to load media file';
        }

        // Copy text to clipboard with visual feedback
        async function copyToClipboard(text, buttonElement) {
            try {
                if (navigator.clipboard && navigator.clipboard.writeText) {
                    // Modern clipboard API
                    await navigator.clipboard.writeText(text);
                } else {
                    // Fallback for older browsers
                    const textArea = document.createElement('textarea');
                    textArea.value = text;
                    textArea.style.position = 'fixed';
                    textArea.style.left = '-999999px';
                    textArea.style.top = '-999999px';
                    document.body.appendChild(textArea);
                    textArea.focus();
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                }
                
                // Visual feedback
                const originalIcon = buttonElement.innerHTML;
                const originalTitle = buttonElement.title;
                buttonElement.innerHTML = '<i class="fas fa-check text-success"></i>';
                buttonElement.title = 'Copied!';
                buttonElement.classList.add('btn-success');
                buttonElement.classList.remove('btn-outline-secondary');
                
                // Reset after 1.5 seconds
                setTimeout(() => {
                    buttonElement.innerHTML = originalIcon;
                    buttonElement.title = originalTitle;
                    buttonElement.classList.remove('btn-success');
                    buttonElement.classList.add('btn-outline-secondary');
                }, 1500);
                
            } catch (err) {
                console.error('Failed to copy text: ', err);
                // Show error feedback
                const originalIcon = buttonElement.innerHTML;
                const originalTitle = buttonElement.title;
                buttonElement.innerHTML = '<i class="fas fa-exclamation-triangle text-danger"></i>';
                buttonElement.title = 'Copy failed';
                
                setTimeout(() => {
                    buttonElement.innerHTML = originalIcon;
                    buttonElement.title = originalTitle;
                }, 2000);
            }
        }

        async function requestSync(fileId, fileName) {
            try {
                showLoading();
                
                const formData = new FormData();
                formData.append('fileId', fileId);
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value || '');
                
                const response = await fetch('/Files/RequestSync', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                if (result.success) {
                    // Refresh the current page to show updated data
                    performSearch(currentPage);
                    
                    // Show success message
                    showSuccessMessage(`Sync request created for "${fileName}". The file will be synced when available.`);
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Sync request error:', error);
                alert('An error occurred while trying to request sync for the file.');
            } finally {
                hideLoading();
            }
        }

        // Update reattachEventListeners to include bulk operations
        function reattachEventListeners() {
            attachDeleteEventListeners();
            attachSyncEventListeners();
            attachCopyPathEventListeners();
            attachCopyFilenameEventListeners();
            attachMediaEventListeners();
            // Note: Bulk action listeners are attached to document, so they don't need reattaching
            updateSelectAllState();
            updateBulkActionsToolbar();
        }
    </script>
}